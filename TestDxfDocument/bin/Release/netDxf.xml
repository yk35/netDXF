<?xml version="1.0"?>
<doc>
    <assembly>
        <name>netDxf</name>
    </assembly>
    <members>
        <member name="T:netDxf.AciColor">
            <summary>
            Represents an indexed color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByLayer">
            <summary>
            Gets the ByLayer color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByBlock">
            <summary>
            Gets the ByBlock color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Red">
            <summary>
            Defines a default red color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Yellow">
            <summary>
            Defines a default yellow color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Green">
            <summary>
            Defines a default green color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Cyan">
            <summary>
            Defines a default cyan color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Blue">
            <summary>
            Defines a default blue color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Magenta">
            <summary>
            Defines a default magenta color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Default">
            <summary>
            Defines a default white/black color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.DarkGrey">
            <summary>
            Defines a default dark grey color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.LightGrey">
            <summary>
            Defines a default light grey color.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Byte,System.Byte,System.Byte)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>Since only 255 indexed colors are posible the conversion won't be exact.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Single,System.Single,System.Single)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>Since only 255 indexed are posible the conversion won't be exact.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Drawing.Color)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="index">Color index.</param>
            <remarks>
            Accepted color index values range from 0 to 256.
            Indexes from 1 to 255 represents a color, the index 256 is reserved to define a color bylayer and the index 0 represents byblock.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.Index">
            <summary>
            Gets or sets the color index.
            </summary>
            <remarks>
            Accepted color index values range from 0 to 256.
            Indexes from 1 to 255 represents a color, the index 256 is reserved to define a color bylayer and the index 0 represents byblock.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToColor">
            <summary>
            Converts the AciColor to a <see cref="T:System.Drawing.Color">color</see>.
            </summary>
            <returns>A default color white will be used for byblock and bylayer colors.</returns>
        </member>
        <member name="M:netDxf.AciColor.RGBtoACI(System.Byte,System.Byte,System.Byte)">
             <summary>
             Obtains a color index from the rgb components.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
        </member>
        <member name="T:netDxf.Blocks.BlockEnd">
            <summary>
            Represents the termination element of the block definiton.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockEnd.#ctor(netDxf.Tables.Layer)">
            <summary>
            Initializes a new instance of the <c>BlockEnd</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockEnd.Layer">
            <summary>
            Gets or sets the block end <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.Block">
            <summary>
            Represents a block definition.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
        </member>
        <member name="P:netDxf.Blocks.Block.Name">
            <summary>
            Gets the block name.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.BasePoint">
            <summary>
            Gets or sets the block base point.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Layer">
            <summary>
            Gets or sets the block <see cref="P:netDxf.Blocks.Block.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Attributes">
            <summary>
            Gets or sets the block <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Entities">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.IEntityObject">entity</see> list that makes the block.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.CodeValuePair">
            <summary>
            Represents the minimun information element in a dxf file.
            </summary>
        </member>
        <member name="M:netDxf.CodeValuePair.#ctor(System.Int32,System.String)">
            <summary>
            Initalizes a new instance of the <c>CodeValuePair</c> class.
            </summary>
            <param name="code">Dxf code.</param>
            <param name="value">Value for the specified code.</param>
        </member>
        <member name="P:netDxf.CodeValuePair.Code">
            <summary>
            Gets the dxf code.
            </summary>
        </member>
        <member name="P:netDxf.CodeValuePair.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Hatch">
            <summary>
            Represents a hatch <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Hatch.#ctor(netDxf.Entities.HatchPattern,System.Collections.Generic.List{netDxf.Entities.HatchBoundaryPath})">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <remarks>
            The hatch boundary paths must be on the same plane as the hatch.
            The normal and the elevation of the boundary paths will be omited (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse, circle and arc will be used.
            </remarks>
            <param name="pattern"><see cref="T:netDxf.Entities.HatchPattern">Hatch pattern</see>.</param>
            <param name="boundaryPaths">A list of <see cref="T:netDxf.Entities.HatchBoundaryPath">boundary paths</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Hatch.Pattern">
            <summary>
            Gets or sets the hatch pattern name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.BoundaryPaths">
            <summary>
            Gets or sets the hatch boundary paths.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.Elevation">
            <summary>
            Gets or sets the hatch elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.Normal">
            <summary>
            Gets or sets the hatch <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PredefinedHatchPatternName">
            <summary>
            Predefined hatch pattern name.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PredefinedHatchPatternName.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PredefinedHatchPatternName.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PredefinedHatchPatternName.Net">
            <summary>
            Net.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PredefinedHatchPatternName.Dots">
            <summary>
            Dots.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchStyle">
            <summary>
            Hatch style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Normal">
            <summary>
            Hatch “odd parity” area.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Outer">
            <summary>
            Hatch outermost area only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Ignore">
            <summary>
            Hatch through entire area.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchType">
            <summary>
            Hatch pattern type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.UserDefined">
            <summary>
            User defined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Predefined">
            <summary>
            Predefined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.FillFlag">
            <summary>
            Solid fill flag (solid fill = 1; pattern fill = 0); for MPolygon, the version of MPolygon.
            </summary>
        </member>
        <member name="F:netDxf.Entities.FillFlag.PatternFill">
            <summary>
            Pattern fill.
            </summary>
        </member>
        <member name="F:netDxf.Entities.FillFlag.SolidFill">
            <summary>
            Solid fill.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchPattern">
            <summary>
            Represents the hatch pattern style.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the dxf file).</param>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Solid">
            <summary>
            Solid hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Line">
            <summary>
            Lines hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Net">
            <summary>
            Net or squares hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Dots">
            <summary>
            Dots hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Name">
            <summary>
            Gets or sets the hatch pattern name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Description">
            <summary>
            Gets or sets the hatch description (optional, this information is not saved in the dxf file).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Style">
            <summary>
            Gets the hatch style (always Normal).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Type">
            <summary>
            Gets or sets the hatch pattern type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Fill">
            <summary>
            Solid fill flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Angle">
            <summary>
            Gets or sets the pattern angle between 0 and 180 degrees (not aplicable in Solid fills).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Scale">
            <summary>
            Gets or sets the pattern scale (not aplicable in Solid fills).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.LineDefinitions">
            <summary>
            Gets or sets the definition of the lines that make up the pattern.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.FromFile(System.String,System.String)">
            <summary>
            Creates a new hatch pattern from the definition in a pat file.
            </summary>
            <param name="file">Pat file where the definition is located.</param>
            <param name="patternName">Name of the pattern definition that wants to be read (ignore case).</param>
            <returns>A Hatch pattern defined by the pat file.</returns>
        </member>
        <member name="T:netDxf.Entities.BoundaryPathTypeFlag">
            <summary>
            Defines the boundary path type of the hatch.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath">
            <summary>
            Represent a loop of a hatch boundary path.
            The entities that make a loop can be any combination of lines, polylines, circles, arcs and ellipses.
            </summary>
            <remarks>
            The entities that define a loop must define a closed path and they have to be on the same plane as the hatch, 
            if these conditions are not met the result will be unpredictable.
            The normal and the elevation will be omited (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse and the circle will be used.
            Circles, full ellipses and closed polylines are closed paths so only one must exist in the data list.
            Lines, arcs, ellipse arcs and open polylines are open paths so more enties must exist to make a closed loop.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.#ctor(System.Collections.Generic.List{netDxf.Entities.IEntityObject})">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <param name="data">List of entities that makes a loop for the hatch boundary paths.</param>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.Data">
            <summary>
            Gets the list of entities that makes a loop for the hatch boundary paths.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.PathTypeFlag">
            <summary>
            Gets the boundary path type flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.NumberOfEdges">
            <summary>
            Gets the number of edges that make up the boundary path.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchPatternLineDefinition">
            <summary>
            Defines a single line thats is part of a hatch pattern.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPatternLineDefinition.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchPatternLineDefinition</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Angle">
            <summary>
            Gets or sets the angle of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Origin">
            <summary>
            Gets or sets the origin of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Delta">
            <summary>
            Gets or sets the local displacements between lines of the same family.
            </summary>
            <remarks>
            The Delta.X value indicates the displacement between members of the family in the direction of the line. It is used only for dashed lines.
            The Delta.Y value indicates the spacing between members of the family; that is, it is measured perpendicular to the lines. 
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.DashPattern">
            <summary>
            Gets or sets the dash patter of the line it is equivalent as the segments of a <see cref="T:netDxf.Tables.LineType">LineType</see>.
            </summary>
            <remarks>
            Positive values means solid segments and negative values means spaces (one entry per element).
            </remarks>
        </member>
        <member name="T:netDxf.Entities.LightWeightPolyline">
            <summary>
            Represents a polyline <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Entities.LightWeightPolyline">LightWeightPolyline</see> and the <see cref="T:netDxf.Entities.Polyline">Polyline</see> are essentially the same entity,
            they are both here for compatibility reasons.
            When a AutoCad12 file is saved all lightweight polylines will be converted to polylines, while for AutoCad2000 and later versions all
            polylines will be converted to lightweight polylines.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolyline.#ctor(System.Collections.Generic.List{netDxf.Entities.LightWeightPolylineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline</c> class.
            </summary>
            <param name="vertexes">Polyline <see cref="T:netDxf.Entities.LightWeightPolylineVertex">vertex</see> list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed</param>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolyline.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.Vertexes">
            <summary>
            Gets or sets the polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.IsClosed">
            <summary>
            Gets or sets if the polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.Normal">
            <summary>
            Gets or sets the polyline <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.Thickness">
            <summary>
            Gets or sets the polyline thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.Elevation">
            <summary>
            Gets or sets the polyline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.Flags">
            <summary>
            Gets the polyline type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolyline.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolyline.SetConstantWidth(System.Double)">
            <summary>
            Sets a constant width for all the polyline segments.
            </summary>
            <param name="width">Polyline width.</param>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolyline.ToPolyline">
            <summary>
            Converts the lightweight polyline in a <see cref="T:netDxf.Entities.Polyline">Polyline</see>.
            </summary>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline">Polyline</see> that represents the lightweight polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolyline.Explode">
            <summary>
            Decompose the actual polyline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <remarks>
            Makes the opposite function as the Join() method.
            </remarks>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see>see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolyline.PoligonalVertexes(System.Int32,System.Double,System.Double)">
            <summary>
            Obtains a list of vertexes that represent the polyline approximating the curve segments as necessary.
            </summary>
            <param name="bulgePrecision">Curve segments precision (a value of zero means that no approximation will be made).</param>
            <param name="weldThreshold">Tolerance to consider if two new generated vertexes are equal.</param>
            <param name="bulgeThreshold">Minimun distance from which approximate curved segments of the polyline.</param>
            <returns>The return vertexes are expresed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolyline.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.LightWeightPolylineVertex">
            <summary>
            Represents a lightweight polyline vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolylineVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>LightWeightPolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolylineVertex.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>LightWeightPolylineVertex</c> class.
            </summary>
            <param name="location">Lightweight polyline <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolylineVertex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LightWeightPolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolylineVertex.Location">
            <summary>
            Gets or sets the polyline vertex <see cref="T:netDxf.Vector2">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolylineVertex.BeginWidth">
            <summary>
            Gets or sets the light weight polyline begin width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolylineVertex.EndWidth">
            <summary>
            Gets or sets the light weight polyline end width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolylineVertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the endpoint. 
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.LightWeightPolylineVertex.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LightWeightPolylineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Ellipse">
            <summary>
            Represents an ellipse <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector3">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>ellipse</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Center">
            <summary>
            Gets or sets the ellipse <see cref="T:netDxf.Vector3">center</see>.
            </summary>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MajorAxis">
            <summary>
            Gets or sets the ellipse mayor axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MinorAxis">
            <summary>
            Gets or sets the ellipse minor axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Rotation">
            <summary>
            Gets or sets the ellipse local rotation along its normal.
            </summary>
            <remarks>
            The rotation axis it is defined by the 
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.StartAngle">
            <summary>
            Gets or sets the ellipse start angle in degrees.
            </summary>
            <remarks><c>StartAngle</c> equals 0 and <c>EndAngle</c> equals 360 for a full ellipse.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.EndAngle">
            <summary>
            Gets or sets the ellipse end angle in degrees.
            </summary>
            <remarks><c>StartAngle</c> equals 0 and <c>EndAngle</c> equals 360 for a full ellipse.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Normal">
            <summary>
            Gets or sets the ellipse <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.CurvePoints">
            <summary>
            Gets or sets the number of points generated along the ellipse during the conversion to a polyline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Thickness">
            <summary>
            Gets or sets the ellipse thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.IsFullEllipse">
            <summary>
            Checks if the the actual instance is a full ellipse.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.ToPolyline(System.Int32)">
            <summary>
            Converts the ellipse in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline">Polyline</see> that represents the ellipse.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolarCoordinateRelativeToCenter(System.Double)">
            <summary>
            Calculate the local point on the ellipse for a given angle relative to the center.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>A local point on the ellipse for the given angle relative to the center.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the ellipse in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the ellipse expresed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.EndSequence">
            <summary>
            Represents the terminator element of a vertex sequence in polylines or attributes in a block reference.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EndSequence.#ctor">
            <summary>
            Initializes a new instance of the <c>EndSequence</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EndSequence.Layer">
            <summary>
            Gets or sets the end sequence <see cref="T:netDxf.Tables.Layer">layer</see>
            </summary>
        </member>
        <member name="T:netDxf.Entities.NurbsCurve">
            <summary>
            Represents a nurbs curve <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
            <remarks>The nurbs curve uses a default open uniform knot vector.</remarks>
        </member>
        <member name="M:netDxf.Entities.NurbsCurve.#ctor">
            <summary>
            Initializes a new instance of the <c>NurbsCurve</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.NurbsCurve.#ctor(System.Collections.Generic.List{netDxf.Entities.NurbsVertex},System.Int32)">
            <summary>
            Initializes a new instance of the <c>NurbsCurve</c> class.
            </summary>
            <param name="controlPoints">The nurbs curve <see cref="T:netDxf.Entities.NurbsVertex">control point</see> list.</param>
            <param name="order">The nurbs curve order.</param>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.ControlPoints">
            <summary>
            Gets the nurbs curve <see cref="T:netDxf.Entities.NurbsVertex">control point</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.Order">
            <summary>
            Gets or sets the nurbs curve order.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.Normal">
            <summary>
            Gets or sets the nurbs curve <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.CurvePoints">
            <summary>
            Gets or sets the number of points generated along the nurbs curve during the conversion to a polyline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.Thickness">
            <summary>
            Gets or sets the nurbs curve thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.Elevation">
            <summary>
            Gets or sets the nurbs curve elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.DxfName">
            <summary>
            Gets the dxf code that represents the entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsCurve.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.NurbsCurve.PolygonalVertexes(System.Int32)">
            <summary>
            Obtains a list of vertexes that represent the nurbs curve.
            </summary>
            <param name="precision">Number of point to approximate the curve to a polyline.</param>
            <returns>The vertexes are expresed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.NurbsCurve.SetUniformWeights(System.Double)">
            <summary>
            Sets a constant weight for all the nurbs curve <see cref="T:netDxf.Entities.NurbsVertex">vertex</see> list.
            </summary>
            <param name="weight">Nurbs vertex weight.</param>
        </member>
        <member name="T:netDxf.Entities.NurbsVertex">
            <summary>
            Represents a nurbs curve vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.NurbsVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>NurbsVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.NurbsVertex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>NurbsVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.NurbsVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>NurbsVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="weight">Nurbs vertex weight.</param>
        </member>
        <member name="M:netDxf.Entities.NurbsVertex.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>NurbsVertex</c> class.
            </summary>
            <param name="location">Nurbs vertex <see cref="T:netDxf.Vector2">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.NurbsVertex.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>NurbsVertex</c> class.
            </summary>
            <param name="location">Nurbs vertex <see cref="T:netDxf.Vector2">location</see>.</param>
            <param name="weight">Nurbs vertex weight.</param>
        </member>
        <member name="P:netDxf.Entities.NurbsVertex.Location">
            <summary>
            Gets or sets the vertex <see cref="T:netDxf.Vector2">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.NurbsVertex.Weight">
            <summary>
            Gets or sets the vertex weight.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Solid">
            <summary>
            Represents a solid <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
            <param name="firstVertex">Solid <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">Solid <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">Solid <see cref="T:netDxf.Vector3">third vertex</see>.</param>
            <param name="fourthVertex">Solid <see cref="T:netDxf.Vector3">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.FirstVertex">
            <summary>
            Gets or sets the first solid <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.SecondVertex">
            <summary>
            Gets or sets the second solid <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.ThirdVertex">
            <summary>
            Gets or sets the third solid <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.FourthVertex">
            <summary>
            Gets or sets the fourth solid <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.Thickness">
            <summary>
            Gets or sets the thickness of the solid.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.Normal">
            <summary>
            Gets or sets the solid <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Arc">
            <summary>
            Represents a circular arc <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector3">center</see> in object coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Center">
            <summary>
            Gets or sets the arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Radius">
            <summary>
            Gets or sets the arc radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.StartAngle">
            <summary>
            Gets or sets the arc start angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.EndAngle">
            <summary>
            Gets or sets the arc end angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Thickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Normal">
            <summary>
            Gets or sets the arc <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the arc in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the arc expresed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.ToPolyline(System.Int32)">
            <summary>
            Converts the arc in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline">Polyline</see> that represents the arc.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Attribute">
            <summary>
            Represents a attribute <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Intitializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition,System.Object)">
            <summary>
            Intitializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="P:netDxf.Entities.Attribute.Definition">
            <summary>
            Gets the attribute definition.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Attribute.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.AttributeFlags">
            <summary>Attribute flags.</summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Visible">
            <summary>
            Attribute is visible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Hidden">
            <summary>
            Attribute is invisible (does not appear).
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Constant">
            <summary>
            This is a constant attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Verify">
            <summary>
            Verification is required on input of this attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Predefined">
            <summary>
            Attribute is preset (no prompt during insertion).
            </summary>
        </member>
        <member name="T:netDxf.Entities.AttributeDefinition">
            <summary>
            Represents a attribute definition <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String)">
            <summary>
            Intitializes a new instance of the <c>AttributeDefiniton</c> class.
            </summary>
            <param name="id">Attribute identifier, the parameter <c>id</c> string cannot contain spaces.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,netDxf.Tables.TextStyle)">
            <summary>
            Intitializes a new instance of the <c>AttributeDefiniton</c> class.
            </summary>
            <param name="id">Attribute identifier, the parameter <c>id</c> string cannot contain spaces.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Id">
            <summary>
            Gets the attribute identifier.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Text">
            <summary>
            Gets or sets the attribute information text.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Alignment">
            <summary>
            Gets or sets the <see cref="T:netDxf.TextAlignment">text alignment.</see>
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Height">
            <summary>
            Gets or sets the attribute text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.WidthFactor">
            <summary>
            Gets or sets the attribute text width factor.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Value">
            <summary>
            Gets or sets the attribute default value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Style">
            <summary>
            Gets or sets  the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.BasePoint">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">insertion point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Normal">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Vertex">
            <summary>
            Represents a dxf Vertex.
            </summary>
            <remarks>
            The Vertex class holds all the information read from the dxf file even if its needed or not.
            For internal use only.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="location">Vertex <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="location">Vertex <see cref="T:netDxf.Vector2">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="P:netDxf.Entities.Vertex.Location">
            <summary>
            Gets or sets the polyline vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.BeginThickness">
            <summary>
            Gets or sets the light weight polyline begin thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.EndThickness">
            <summary>
            Gets or sets the light weight polyline end thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.Accepted values range from 0 to 1.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the endpoint. 
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Vertex.Flags">
            <summary>
            Gets or sets the vertyex type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Color">
            <summary>
            Gets or sets the entity color.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Layer">
            <summary>
            Gets or sets the entity layer.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.LineType">
            <summary>
            Gets or sets the entity line type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.XData">
            <summary>
            Gets or sets the entity extended data.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Polyline3dVertex">
            <summary>
            Represents a 3d polyline vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3dVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline3dVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3dVertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Polyline3dVertex</c> class.
            </summary>
            <param name="location">Polyline <see cref="T:netDxf.Vector3">vertex</see> coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline3dVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="P:netDxf.Entities.Polyline3dVertex.Location">
            <summary>
            Gets or sets the vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3dVertex.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3dVertex.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3dVertex.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3dVertex.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3dVertex.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3dVertex.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3dVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.PolylineTypeFlags">
            <summary>
            Defines the polyline type.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.OpenPolyline">
            <summary>
            Default, open polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolylineOrClosedPolygonMeshInM">
            <summary>
            This is a closed polyline (or a polygon mesh closed in the M direction).
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.CurveFit">
            <summary>
            Curve-fit vertices have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.SplineFit">
            <summary>
            Spline-fit vertices have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.Polyline3D">
            <summary>
            This is a 3D polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolygonMesh">
            <summary>
            This is a 3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolygonMeshInN">
            <summary>
            The polygon mesh is closed in the N direction.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolyfaceMesh">
            <summary>
            The polyline is a polyface mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ContinuousLineTypePatter">
            <summary>
            The linetype pattern is generated continuously around the vertices of this polyline.
            </summary>
        </member>
        <member name="T:netDxf.Entities.SmoothType">
            <summary>
            Defines the curves and smooth surface type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SmoothType.NoSmooth">
            <summary>
            No smooth surface fitted
            </summary>
        </member>
        <member name="F:netDxf.Entities.SmoothType.Quadratic">
            <summary>
            Quadratic B-spline surface
            </summary>
        </member>
        <member name="F:netDxf.Entities.SmoothType.Cubic">
            <summary>
            Cubic B-spline surface
            </summary>
        </member>
        <member name="F:netDxf.Entities.SmoothType.Bezier">
            <summary>
            Bezier surface
            </summary>
        </member>
        <member name="T:netDxf.Entities.IPolyline">
            <summary>
            Represents a generic polyline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.IPolyline.Flags">
            <summary>
            Gets the polyline type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.VertexTypeFlags">
            <summary>
            Defines the vertex type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolylineVertex">
            <summary>
            2d polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFittingExtraVertex">
            <summary>
            Extra vertex created by curve-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFitTangent">
            <summary>
            Curve-fit tangent defined for this vertex.
            A curve-fit tangent direction of 0 may be omitted from DXF output but is significant if this bit is set.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.NotUsed">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineVertexFromSplineFitting">
            <summary>
            Spline vertex created by spline-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineFrameControlPoint">
            <summary>
            Spline frame control point.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polyline3dVertex">
            <summary>
            3D polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polygon3dMesh">
            <summary>
            3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolyfaceMeshVertex">
            <summary>
            Polyface mesh vertex.
            </summary>
        </member>
        <member name="T:netDxf.Entities.IVertex">
            <summary>
            Represents a generic vertex.
            </summary>
        </member>
        <member name="P:netDxf.Entities.IVertex.Flags">
            <summary>
            Gets the Vertex type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Point">
            <summary>
            Represents a point <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="location">Point <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Location">
            <summary>
            Gets or sets the point <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Thickness">
            <summary>
            Gets or sets the point thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Normal">
            <summary>
            Gets or sets the point <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Point.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMeshFace">
            <summary>
            Represents a polyface mesh face. 
            </summary>
            <remarks>
            The way the vertex indexes for a polyfacemesh are defined follows the dxf documentation.
            The values of the vertex indexes specify one of the previously defined vertexes by the index in the list plus one.
            If the index is negative, the edge that begins with that vertex is invisible.
            For example if the vertex index in the list is 0 the vertex index for the face will be 1, and
            if the edge between the vertexes 0 and 1 is hidden the vertex index for the face will be -1.
            The maximum number of vertex indexes in a face is 4.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.#ctor">
            <summary>
            Initializes a new instance of the <c>PolyfaceMeshFace</c> class.
            </summary>
            <remarks>
            By default the face is made up of three vertexes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <c>PolyfaceMeshFace</c> class.
            </summary>
            <param name="vertexIndexes">Array of indexes to the vertex list of a polyface mesh that makes up the face.</param>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.VertexIndexes">
            <summary>
            Gets or sets the array of indexes to the vertex list of a polyface mesh that makes up the face.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMeshVertex">
            <summary>
            Represents a polyface mesh vertex. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="location">Polyface mesh vertex <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PolylineVertex class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Location">
            <summary>
            Gets or sets the polyface mesh vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Polyline3d">
            <summary>
            Represents a 3d polyline <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3d.#ctor(System.Collections.Generic.List{netDxf.Entities.Polyline3dVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Entities.Polyline3dVertex">vertex</see> list.</param>
            <param name="isClosed">Sets if the polyline is closed</param>
        </member>
        <member name="M:netDxf.Entities.Polyline3d.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3d.Vertexes">
            <summary>
            Gets or sets the polyline <see cref="T:netDxf.Entities.Polyline3dVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3d.Flags">
            <summary>
            Gets the polyline type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3d.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3d.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3d.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3d.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline3d.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline3d.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline3d.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.EntityType">
            <summary>
            Defines the entity type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Line">
            <summary>
            Line entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline">
            <summary>
            Polyline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline3d">
            <summary>
            3d polyline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.LightWeightPolyline">
            <summary>
            Lightweight polyline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolyfaceMesh">
            <summary>
            Polyface mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Circle">
            <summary>
            Circle entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.NurbsCurve">
            <summary>
            Nurbs curve entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ellipse">
            <summary>
            Ellipse entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Point">
            <summary>
            Point entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Arc">
            <summary>
            Arc entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Text">
            <summary>
            Text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Face3D">
            <summary>
            3d face entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Solid">
            <summary>
            Solid .
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Insert">
            <summary>
            Block insertion entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Hatch">
            <summary>
            Hatch entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Attribute">
            <summary>
            Attribute entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.AttributeDefinition">
            <summary>
            Attribute definition entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.LightWeightPolylineVertex">
            <summary>
            Lightweight polyline vertex entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolylineVertex">
            <summary>
            Polyline vertex entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline3dVertex">
            <summary>
            Polyline 3d vertex entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolyfaceMeshVertex">
            <summary>
            Polyface mesh vertex entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolyfaceMeshFace">
            <summary>
            Polyface mesh face entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Dimension">
            <summary>
            Dimension entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Vertex">
            <summary>
            A generic vertex entity.
            </summary>
        </member>
        <member name="T:netDxf.Entities.IEntityObject">
            <summary>
            Represents a generic entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.IEntityObject.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.IEntityObject.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.IEntityObject.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.IEntityObject.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.IEntityObject.LineType">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.IEntityObject.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.IEntityObject.XData">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.IEntityObject.XData">extended data</see>.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Insert">
            <summary>
            Represents a block insertion <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="insertionPoint">Insert <see cref="T:netDxf.Vector3">point</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert <see cref="T:netDxf.Blocks.Block">block definition</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Insert.Attributes">
            <summary>
            Gets the insert list of <see cref="T:netDxf.Entities.Attribute">attributes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Block">
            <summary>
            Gets the insert <see cref="T:netDxf.Blocks.Block">block definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.InsertionPoint">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Scale">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">scale</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Rotation">
            <summary>
            Gets or sets the insert rotation along the normal vector in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Normal">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Line">
            <summary>
            Represents a line <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line <see cref="T:netDxf.Vector3">start point.</see></param>
            <param name="endPoint">Line <see cref="T:netDxf.Vector3">end point.</see></param>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.StartPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">start point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.EndPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">end point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Normal">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Circle">
            <summary>
            Represents a circle <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector3">center</see> in object coordinates.</param>
            <param name="radius">Circle radius.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Center">
            <summary>
            Gets or sets the circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Radius">
            <summary>
            Gets or set the circle radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Thickness">
            <summary>
            Gets or sets the circle thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Normal">
            <summary>
            Gets or sets the circle <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
            <remarks>
            The normal will always be normalized.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Circle.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the circle in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the circle expresed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.ToPolyline(System.Int32)">
            <summary>
            Converts the circle in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline">Polyline</see> that represents the circle.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.EdgeFlags">
            <summary>
            Defines which edges are hidden.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.Visibles">
            <summary>
            All edges as visibles (default).
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.First">
            <summary>
            First edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.Second">
            <summary>
            Second edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.Third">
            <summary>
            Third edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EdgeFlags.Fourth">
            <summary>
            Fourth edge is invisible.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Face3d">
            <summary>
            Represents a 3DFace <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
            <param name="firstVertex">3d face <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">3d face <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">3d face <see cref="T:netDxf.Vector3">third vertex</see>.</param>
            <param name="fourthVertex">3d face <see cref="T:netDxf.Vector3">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor">
            <summary>
            Initializes a new instance of the <c>Face3D</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.FirstVertex">
            <summary>
            Gets or sets the first 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.SecondVertex">
            <summary>
            Gets or sets the second 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.ThirdVertex">
            <summary>
            Gets or sets the third 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.FourthVertex">
            <summary>
            Gets or sets the fourth 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.EdgeFlags">
            <summary>
            Gets or set the 3d face edge visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3d.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMesh">
            <summary>
            Represents a polyface mesh <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.#ctor(System.Collections.Generic.List{netDxf.Entities.PolyfaceMeshVertex},System.Collections.Generic.List{netDxf.Entities.PolyfaceMeshFace})">
            <summary>
            Initializes a new instance of the <c>PolyfaceMesh</c> class.
            </summary>
            <param name="vertexes">Polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshVertex">vertex</see> list.</param>
            <param name="faces">Polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshFace">faces</see> list.</param>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.#ctor">
            <summary>
            Initializes a new instance of the <c>PolyfaceMesh</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Vertexes">
            <summary>
            Gets or sets the polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshVertex">vertexes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Faces">
            <summary>
            Gets or sets the polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshFace">faces</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Flags">
            <summary>
            Gets the polyline type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Polyline">
            <summary>
            Represents a polyline <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Entities.LightWeightPolyline">LightWeightPolyline</see> and
            the <see cref="T:netDxf.Entities.Polyline">Polyline</see> are essentially the same entity, they are both here for compatibility reasons.
            When a AutoCad12 file is saved all lightweight polylines will be converted to polylines, while for AutoCad2000 and later versions all
            polylines will be converted to lightweight polylines.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline</c> class.
            </summary>
            <param name="vertexes">Polyline <see cref="T:netDxf.Vector2">vertex</see> list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor(System.Collections.Generic.List{netDxf.Entities.PolylineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline</c> class.
            </summary>
            <param name="vertexes">Polyline vertex list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Vertexes">
            <summary>
            Gets or sets the polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.IsClosed">
            <summary>
            Gets or sets if the polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Normal">
            <summary>
            Gets or sets the polyline <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Thickness">
            <summary>
            Gets or sets the polyline thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Elevation">
            <summary>
            Gets or sets the polyline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Flags">
            <summary>
            Gets the polyline type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.SetConstantWidth(System.Double)">
            <summary>
            Sets a constant width for all the polyline segments.
            </summary>
            <param name="width">Polyline width.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline.ToLightWeightPolyline">
            <summary>
            Converts the polyline in a <see cref="T:netDxf.Entities.LightWeightPolyline">LightWeightPolyline</see>.
            </summary>
            <returns>A new instance of <see cref="T:netDxf.Entities.LightWeightPolyline">LightWeightPolyline</see> that represents the lightweight polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline.Explode">
            <summary>
            Decompose the actual polyline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <remarks>
            Makes the opposite function as the Join() method.
            </remarks>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see>see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline.Join(System.Collections.Generic.List{netDxf.Entities.IEntityObject})">
            <summary>
            Builds a polyline from a list of <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <remarks>
            Makes the opposite function as the Explode() method.
            </remarks>
            <param name="entities">List of <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see> to join.</param>
            <returns>A polyline made up of the <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see> of the entities list.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline.PoligonalVertexes(System.Int32,System.Double,System.Double)">
            <summary>
            Obtains a list of vertexes that represent the polyline approximating the curve segments as necessary.
            </summary>
            <param name="bulgePrecision">Curve segments precision (a value of zero means that no approximation will be made).</param>
            <param name="weldThreshold">Tolerance to consider if two new generated vertexes are equal.</param>
            <param name="bulgeThreshold">Minimun distance from which approximate curved segments of the polyline.</param>
            <returns>A list of vertexes expresed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Text">
            <summary>
            Represents a Text <see cref="T:netDxf.Entities.IEntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="basePoint">Text base <see cref="T:netDxf.Vector3">point</see>.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="basePoint">Text base <see cref="T:netDxf.Vector3">point</see>.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Text.Rotation">
            <summary>
            Gets or sets the text rotation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Height">
            <summary>
            Gets or sets the text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.TextStyle">text style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.BasePoint">
            <summary>
            Gets or sets the text base <see cref="T:netDxf.Vector3">point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Normal">
            <summary>
            Gets or sets the text <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Value">
            <summary>
            Gets or sets the text string.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.PolylineVertex">
            <summary>
            Represents a polyline vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="location">Polyline <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
            <param name="bulge">Vertex bulge.</param>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="bulge">Vertex bulge.</param>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Location">
            <summary>
            Gets or sets the polyline vertex <see cref="T:netDxf.Vector2">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.BeginWidth">
            <summary>
            Gets or sets the light weight polyline begin width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.EndWidth">
            <summary>
            Gets or sets the light weight polyline end width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the endpoint. 
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Layer">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.LineType">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Tables.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.XData">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.XData">extende data</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Header.DxfVersion">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad12">
            <summary>
            AutoCAD 12 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad14">
            <summary>
            AutoCAD 14 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2000">
            <summary>
            AutoCAD 2000 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2004">
            <summary>
            AutoCAD 2004 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2007">
            <summary>
            AutoCAD 2007 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2010">
            <summary>
            AutoCAD 2010 DXF file.
            </summary>
        </member>
        <member name="T:netDxf.Header.SystemVariable">
            <summary>
            Strings system variables
            </summary>
        </member>
        <member name="F:netDxf.Header.SystemVariable.DatabaseVersion">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.SystemVariable.HandSeed">
            <summary>
            Next available handle (this variable must be present in the header section)
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariable">
            <summary>
            Defines a header variable.
            </summary>
        </member>
        <member name="T:netDxf.Vector2">
            <summary>
            Represent a two component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="array">Array of two elements that represents the vector.</param>
        </member>
        <member name="P:netDxf.Vector2.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="M:netDxf.Vector2.DotProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector2.CrossProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Perpendicular(netDxf.Vector2)">
            <summary>
            Obtains the counter clockwise perpendicular vector .
            </summary>
            <param name="u">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Distance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Distancie.</returns>
        </member>
        <member name="M:netDxf.Vector2.SquareDistance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector2.AngleBetween(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the angle between two vectors.
            </summary>
            <param name="u">A normalized Vector2.</param>
            <param name="v">A normalized Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.MidPoint(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are penpendicular or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Round(netDxf.Vector2,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector2.</param>
            <param name="numDigits">Number of significative defcimal digits.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Equality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Inequality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are different or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Addition(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Subtraction(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Substracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The substraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_UnaryNegation(netDxf.Vector2)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(netDxf.Vector2,System.Double)">
            <summary>
            Multuplies a vector with an scalar (same as a*u, conmutative property).
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(System.Double,netDxf.Vector2)">
            <summary>
            Multuplies an scalar with a vector (same as u*a, conmutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(netDxf.Vector2,System.Double)">
            <summary>
            Divides a vector with an scalar (not same as a/v).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(System.Double,netDxf.Vector2)">
            <summary>
            Divides an scalar with a vector (not same as v/a).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equals.
            </summary>
            <param name="obj">Vector2.</param>
            <param name="threshold">Maximun tolerance.</param>
            <returns>True if the three components are almost equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are equals (uses double.Epsilon the tolerance).
            </summary>
            <param name="obj">Vector2.</param>
            <returns>True if the three components are almost equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Vector3">
            <summary>
            Represent a three component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="array">Array of three elements that represents the vector.</param>
        </member>
        <member name="P:netDxf.Vector3.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitZ">
            <summary>
            Unit Z vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Z">
            <summary>
            Gets or sets the Z component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="M:netDxf.Vector3.DotProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector3.CrossProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.Distance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Distancie.</returns>
        </member>
        <member name="M:netDxf.Vector3.SquareDistance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector3.AngleBetween(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the angle between two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector3.MidPoint(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.ArePerpendicular(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are penpendicular or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.AreParallel(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Round(netDxf.Vector3,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector3.</param>
            <param name="numDigits">Number of significative defcimal digits.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Equality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Inequality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are different or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Addition(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Subtraction(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Substracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The substraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_UnaryNegation(netDxf.Vector3)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector3.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(netDxf.Vector3,System.Double)">
            <summary>
            Multuplies a vector with an scalar (same as a*u, conmutative property).
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(System.Double,netDxf.Vector3)">
            <summary>
            Multuplies an scalar with a vector (same as u*a, conmutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(netDxf.Vector3,System.Double)">
            <summary>
            Divides a vector with an scalar (not same as a/v).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(System.Double,netDxf.Vector3)">
            <summary>
            Divides an scalar with a vector (not same as v/a).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="obj">Vector3.</param>
            <param name="threshold">Maximun tolerance.</param>
            <returns>True if the three components are almost equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are approximate equal (uses double.Epsilon as the tolerance).
            </summary>
            <param name="obj">Vector3.</param>
            <returns>True if the three components are almost equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Matrix3">
            <summary>
            Represents a 3x3 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix3.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m13">Element [0,1].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
            <param name="m23">Element [1,2].</param>
            <param name="m31">Element [2,0].</param>
            <param name="m32">Element [2,1].</param>
            <param name="m33">Element [2,2].</param>
        </member>
        <member name="P:netDxf.Matrix3.Zero">
            <summary>
            Gets the zero matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.Identity">
            <summary>
            Getx the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M13">
            <summary>
            Gets or sets the matrix element [0,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M23">
            <summary>
            Gets or sets the matrix element [1,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M31">
            <summary>
            Gets or sets the matrix element [2,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M32">
            <summary>
            Gets or sets the matrix element [2,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M33">
            <summary>
            Gets or sets the matrix element [2,2].
            </summary>
        </member>
        <member name="M:netDxf.Matrix3.op_Addition(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Subtraction(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix substraction.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="u">Vector3d.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix3.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determiant.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Traspose">
            <summary>
            Obtains the traspose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.DxfObjectCode">
            <summary>
            Dxf entities codes.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AppId">
            <summary>
            Application registry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimStyle">
            <summary>
            Dimension style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecord">
            <summary>
            Block record.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LineType">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layer">
            <summary>
            Layer.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ViewPort">
            <summary>
            Viewport.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyle">
            <summary>
            Text style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.View">
            <summary>
            View.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ucs">
            <summary>
            Ucs.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockEnd">
            <summary>
            End block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LightWeightPolyline">
            <summary>
            Lightweight polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Arc">
            <summary>
            Arc.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Text">
            <summary>
            Text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Face3D">
            <summary>
            3d face.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Insert">
            <summary>
            Block insertion.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Hatch">
            <summary>
            Hatch.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AttributeDefinition">
            <summary>
            Attribute definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Attribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Vertex">
            <summary>
            Vertex.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSequence">
            <summary>
            End sequence.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dimension">
            <summary>
            Dimension.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dictionary">
            <summary>
            Dictionary.
            </summary>
        </member>
        <member name="T:netDxf.DxfObject">
            <summary>
            Represents the base class for all dxf objects.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DxfObject</c> class.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.CodeName">
            <summary>
            Gets the dxf entity type string.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.Handle">
            <summary>
            Gets or sets the handle asigned to the dxf object.
            </summary>
            <remarks>It is a unique hexadecimal number asigned automatically to every dxf object. Only the getter is public.</remarks>
        </member>
        <member name="M:netDxf.DxfObject.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Dictionary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>View</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Dictionary.Name">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Dictionary.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.StringEnum">
            <summary>
            Helper class for working with 'extended' enums using <see cref="T:netDxf.StringValueAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:netDxf.StringEnum.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:netDxf.StringEnum"/> instance.
            </summary>
            <param name="enumType">Enum type.</param>
        </member>
        <member name="M:netDxf.StringEnum.GetStringValue(System.String)">
            <summary>
            Gets the string value associated with the given enum value.
            </summary>
            <param name="valueName">Name of the enum value.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:netDxf.StringEnum.GetStringValues">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:netDxf.StringEnum.GetListValues">
            <summary>
            Gets the values as a 'bindable' list datasource.
            </summary>
            <returns>IList for data binding</returns>
        </member>
        <member name="M:netDxf.StringEnum.IsStringDefined(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum.IsStringDefined(System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="P:netDxf.StringEnum.EnumType">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="M:netDxf.StringEnum.GetStringValue(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="T:netDxf.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:netDxf.StringEnum.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:netDxf.StringEnum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:netDxf.StringEnum.IsStringDefined(System.Type,System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum.IsStringDefined(System.Type,System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="T:netDxf.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="M:netDxf.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:netDxf.StringValueAttribute"/> instance.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:netDxf.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="T:netDxf.SubclassMarker">
            <summary>
            Dxf object subclass string markers.
            </summary>
        </member>
        <member name="T:netDxf.Symbols">
            <summary>
            Symbols for dxf text strings.
            </summary>
            <remarks>
            These special strings translates to symbols in AutoCad. 
            </remarks>
        </member>
        <member name="F:netDxf.Symbols.Diameter">
            <summary>
            Text string that shows as a diameter 'Ø' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.Degree">
            <summary>
            Text string that shows as a degree '°' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.PlusMinus">
            <summary>
            Text string that shows as a plus-minus '±' character.
            </summary>
        </member>
        <member name="T:netDxf.Tables.ApplicationRegistry">
            <summary>
            Represents a registered application name to which the <see cref="T:netDxf.XData">extended data</see> is associated.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ApplicationRegistry</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="P:netDxf.Tables.ApplicationRegistry.Default">
            <summary>
            Gets the default application registry.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ApplicationRegistry.Name">
            <summary>
            Gets the application registry name.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Equals(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Determines whether the specified <see cref="T:netDxf.Tables.ApplicationRegistry" /> is equal to the current <see cref="T:netDxf.Tables.ApplicationRegistry" />.
            </summary>
            <returns>
            True if the specified <see cref="T:netDxf.Tables.ApplicationRegistry" /> is equal to the current <see cref="T:netDxf.Tables.ApplicationRegistry" />; otherwise, false.
            </returns>
            <remarks>Two <see cref="T:netDxf.Tables.ApplicationRegistry" /> instances are equal if their names are equal.</remarks>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj"> The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.GetHashCode">
            <summary>
             Serves as a hash function for a particular type. 
            </summary>
            <returns>
             A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Tables.BlockRecord">
            <summary>
            Represent the record of a block in the tables section.
            </summary>
        </member>
        <member name="M:netDxf.Tables.BlockRecord.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>BlockRecord</c> class.
            </summary>
            <param name="name">Block definition name.</param>
        </member>
        <member name="P:netDxf.Tables.BlockRecord.Name">
            <summary>
            Gets the block record name.
            </summary>
        </member>
        <member name="M:netDxf.Tables.BlockRecord.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Tables.View.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>View</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.View.Name">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="M:netDxf.Tables.View.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DimensionStyle</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Name">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Tables.ViewPort.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ViewPort</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ViewPort.Name">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ViewPort.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Tables.ITableObject">
            <summary>
            Defines objects that are part of the dxf table section.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ITableObject.Name">
            <summary>
            Name of the object.
            </summary>
        </member>
        <member name="T:netDxf.Tables.Layer">
            <summary>
            Represents a layer.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Layer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Layer</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="P:netDxf.Tables.Layer.Default">
            <summary>
            Gets the default Layer.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.LineType">
            <summary>
            Gets or sets the layer <see cref="P:netDxf.Tables.Layer.LineType"></see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Color">
            <summary>
            Gets or sets the layer <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsVisible">
            <summary>
            Gets or sets if the layer is visible.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Name">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Layer.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Tables.LineType">
            <summary>
            Represents a line type.
            </summary>
            <remarks>
            Only simple line types are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.LineType.ByLayer">
            <summary>
            Gets the ByLayer line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.ByBlock">
            <summary>
            Gets the ByBlock line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Continuous">
            <summary>
            Gets a predefined continuous line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Center">
            <summary>
            Gets a predefined center line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.DashDot">
            <summary>
            Gets a predefined dash dot line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Dashed">
            <summary>
            Gets a predefined dashed line
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Dot">
            <summary>
            Gets a predefined dot line
            </summary>
        </member>
        <member name="M:netDxf.Tables.LineType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>LineType</c> class.
            </summary>
            <param name="name">Line type name.</param>
            <param name="description">Line type description.</param>
        </member>
        <member name="P:netDxf.Tables.LineType.Description">
            <summary>
            Gets or sets the line type description.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Segments">
            <summary>
            Gets or stes the list of line type segments.
            </summary>
            <remarks>
            A positive decimal number denotes a pen-down (dash) segment of that length. 
            A negative decimal number denotes a pen-up (space) segment of that length. 
            A dash length of 0 draws a dot. 
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LineType.Legth">
            <summary>
            Gets the total length of the line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Name">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LineType.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Tables.LineType.FromFile(System.String,System.String)">
            <summary>
            Creates a new line type from the definition in a lin file.
            </summary>
            <remarks>Only simple line types are supported.</remarks>
            <param name="file">Lin file where the definition is located.</param>
            <param name="lineTypeName">Name of the line type definition that wants to be read (ignore case).</param>
            <returns>A line type defined by the lin file.</returns>
        </member>
        <member name="T:netDxf.Tables.TextStyle">
            <summary>
            Represents a text style.
            </summary>
            <remarks>
            AutoCad12 does not support true type fonts.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Default">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class.
            </summary>
            <param name="name">Text style name.</param>
            <param name="font">Text style font name.</param>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Font">
            <summary>
            Gets the text style font name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>Fixed text height; 0 if not fixed.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsVertical">
            <summary>
            Gets or sets the text is vertical.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsBackward">
            <summary>
            Gets or sets if the text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsUpsideDown">
            <summary>
            Gets or sets if the text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Name">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TextStyle.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.TextAlignment">
            <summary>
            Defines the text alignment.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.MiddleCenter">
            <summary>
            Middle center.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.BaselineLeft">
            <summary>
            Baseline left.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.BaselineCenter">
            <summary>
            Baseline center.
            </summary>
        </member>
        <member name="F:netDxf.TextAlignment.BaselineRight">
            <summary>
            Baseline right.
            </summary>
        </member>
        <member name="T:netDxf.DxfDocument">
            <summary>
            Represents a document to read and write dxf ASCII files.
            </summary>
            <remarks>
            The AutoCad12 dxf object names (application registries, layers, text styles, blocks, line types,...) can not contain spaces,
            so if this situation happens all spaces will be replaced by an underscore character '_'.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor">
            <summary>
            Initalizes a new instance of the <c>DxfDocument</c> class.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Version">
            <summary>
            Gets the dxf file <see cref="T:netDxf.Header.DxfVersion">version</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.FileName">
            <summary>
            Gets the name of the dxf document, once a file is saved or loaded this field is equals the file name without extension.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.AppRegisterNames">
            <summary>
            Gets the application registered names.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Layers">
            <summary>
            Gets the <see cref="T:netDxf.Tables.Layer">layer</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.LineTypes">
            <summary>
            Gets the <see cref="T:netDxf.Tables.LineType">linetype</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.TextStyles">
            <summary>
            Gets the <see cref="T:netDxf.Tables.TextStyle">text style</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Blocks">
            <summary>
            Gets the <see cref="T:netDxf.Blocks.Block">block</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Arcs">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Arc">arc</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Ellipses">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Ellipse">ellipse</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.NurbsCurves">
            <summary>
            Gets the <see cref="T:netDxf.Entities.NurbsCurve">NURBS Curve</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Circles">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Circle">circle</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Faces3d">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Face3d">3d face</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Solids">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Solid">solid</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Inserts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Insert">insert</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Lines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Line">line</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Polylines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.IPolyline">polyline</see> list.
            </summary>
            <remarks>
            The polyline list contains all entities that are considered polylines in the dxf, they are:
            <see cref="T:netDxf.Entities.Polyline">polylines</see>, <see cref="T:netDxf.Entities.Polyline3d">3d polylines</see> and <see cref="T:netDxf.Entities.PolyfaceMesh">polyface meshes</see>
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.Points">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Point">point</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Texts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Text">text</see> list.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Hatches">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Hatch">hatch</see> list.
            </summary>
        </member>
        <member name="M:netDxf.DxfDocument.GetTextStyle(System.String)">
            <summary>
            Gets a text style from the the table.
            </summary>
            <param name="name">TextStyle name</param>
            <returns>TextStyle.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.ContainsTextStyle(netDxf.Tables.TextStyle)">
            <summary>
            Determines if a specified text style exists in the table.
            </summary>
            <param name="textStyle">Text style to locate.</param>
            <returns>True if the specified text style exists or false in any other case.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetBlock(System.String)">
            <summary>
            Gets a block from the the table.
            </summary>
            <param name="name">Block name</param>
            <returns>Block.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.ContainsBlock(netDxf.Blocks.Block)">
            <summary>
            Determines if a specified block exists in the table.
            </summary>
            <param name="block">Block to locate.</param>
            <returns>True if the specified block exists or false in any other case.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetLineType(System.String)">
            <summary>
            Gets a line type from the the table.
            </summary>
            <param name="name">LineType name</param>
            <returns>LineType.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.ContainsLineType(netDxf.Tables.LineType)">
            <summary>
            Determines if a specified line type exists in the table.
            </summary>
            <param name="lineType">Line type to locate.</param>
            <returns>True if the specified line type exists or false in any other case.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.GetLayer(System.String)">
            <summary>
            Gets a layer from the the table.
            </summary>
            <param name="name">Layer name</param>
            <returns>Layer.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.ContainsLayer(netDxf.Tables.Layer)">
            <summary>
            Determines if a specified layer exists in the table.
            </summary>
            <param name="layer">Layer to locate.</param>
            <returns>True if the specified layer exists or false in any other case.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddEntity(System.Collections.Generic.IEnumerable{netDxf.Entities.IEntityObject})">
            <summary>
            Adds a new <see cref="T:netDxf.Entities.IEntityObject">entity</see> to the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.IEntityObject">entities</see></param>
        </member>
        <member name="M:netDxf.DxfDocument.AddEntity(netDxf.Entities.IEntityObject)">
            <summary>
            Adds a new <see cref="T:netDxf.Entities.IEntityObject">entity</see> to the document.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.IEntityObject">entity</see></param>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.String)">
            <summary>
            Loads a dxf ASCII file.
            </summary>
            <param name="file">File name.</param>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.String,netDxf.Header.DxfVersion)">
            <summary>
            Saves the database of the actual DxfDocument to a dxf ASCII file.
            </summary>
            <param name="file">File name.</param>
            <param name="dxfVersion">Dxf file <see cref="T:netDxf.Header.DxfVersion">version</see>.</param>
        </member>
        <member name="T:netDxf.DxfReader">
            <summary>
            Low level dxf reader
            </summary>
        </member>
        <member name="T:netDxf.MathHelper">
            <summary>
            Utility math functions and constants.
            </summary>
        </member>
        <member name="T:netDxf.MathHelper.CoordinateSystem">
            <summary>
            Defines the coordinate system reference.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.CoordinateSystem.World">
            <summary>
            World coordinates.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.CoordinateSystem.Object">
            <summary>
            Object coordinates.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.Epsilon">
            <summary>
            Represents the smallest number.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.MaxAngleDecimals">
            <summary>
            Defines the max number of decimals of an angle. Trigonometric functions are very prone to round off errors.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.DegToRad">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.RadToDeg">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.HalfPI">
            <summary>
            PI/2 (90 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.TwoPI">
            <summary>
            2*PI (360 degrees)
            </summary>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Single,System.Single)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Simple precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Single)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Simple precision number.</param>
            <returns>True if its close to one or false in anyother case.</returns>
            <remarks>By default a tolerance of the constant float.Epsilon will be used.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Double,System.Double)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Double)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in anyother case.</returns>
            <remarks>By default a tolerance of the constant double.Epsilon will be used.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Single,System.Single)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Simple precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Single)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Simple precision number.</param>
            <returns>True if its close to one or false in anyother case.</returns>
            <remarks>By default a tolerance of the constant float.Epsilon will be used.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Double,System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in anyother case.</returns>
            <remarks>By default a tolerance of the constant double.Epsilon will be used.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Simple precision number.</param>
            <param name="b">Simple precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Single,System.Single)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <returns>True if its close to one or false in anyother case.</returns>
            <remarks>By default a tolerance of the constant float.Epsilon will be used.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Double,System.Double)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <returns>True if its close to one or false in anyother case.</returns>
            <remarks>By default a tolerance of the constant float.Epsilon will be used.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector3,netDxf.Vector3,netDxf.MathHelper.CoordinateSystem,netDxf.MathHelper.CoordinateSystem)">
            <summary>
            Transforms a point between coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transormed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(System.Collections.Generic.IList{netDxf.Vector3},netDxf.Vector3,netDxf.MathHelper.CoordinateSystem,netDxf.MathHelper.CoordinateSystem)">
            <summary>
            Transforms a point list between coordinate systems.
            </summary>
            <param name="points">Points to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="from">Points coordinate system.</param>
            <param name="to">Coordinate system of the transformed points.</param>
            <returns>Transormed point list.</returns>
        </member>
        <member name="M:netDxf.MathHelper.ArbitraryAxis(netDxf.Vector3)">
            <summary>
            Gets the rotation matrix from the normal vector (extrusion direction) of an entity.
            </summary>
            <param name="zAxis">Normal vector.</param>
            <returns>Rotation matriz.</returns>
        </member>
        <member name="T:netDxf.XData">
            <summary>
            Represents the extended data information of an entity.
            </summary>
        </member>
        <member name="M:netDxf.XData.#ctor(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Initialize a new instance of the <c>XData</c> class .
            </summary>
            <param name="appReg">Name of the application associated with the list of extended data records.</param>
        </member>
        <member name="P:netDxf.XData.ApplicationRegistry">
            <summary>
            Gets the name of the application associated with the list of extended data records.
            </summary>
        </member>
        <member name="P:netDxf.XData.XDataRecord">
            <summary>
            Gets or sets the list of extended data records.
            </summary>
            <remarks>
            This list cannot contain a XDataRecord with a XDataCode of AppReg, this code is reserved to register the name of the application.
            Any record with this code will be ommited.
            </remarks>
        </member>
        <member name="M:netDxf.XData.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.StringCode">
            <summary>
            Dxf sections.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Unknown">
            <summary>
            not defined.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.HeaderSection">
            <summary>
            header.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ClassesSection">
            <summary>
            clases.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.TablesSection">
            <summary>
            tables.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BlocksSection">
            <summary>
            blocks.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EntitiesSection">
            <summary>
            entities.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ObjectsSection">
            <summary>
            objects.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BeginSection">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndSection">
            <summary>
            end secction code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.LayerTable">
            <summary>
            layers.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ViewPortTable">
            <summary>
            view ports.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ViewTable">
            <summary>
            views.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.UcsTable">
            <summary>
            ucs.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BlockRecordTable">
            <summary>
            block records.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.LineTypeTable">
            <summary>
            line types.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.TextStyleTable">
            <summary>
            text styles.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.DimensionStyleTable">
            <summary>
            dim styles.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ApplicationIDTable">
            <summary>
            extended data application registry.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndTable">
            <summary>
            end table code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Table">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BeginBlock">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndBlock">
            <summary>
            end table code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndSequence">
            <summary>
            end of an element sequence
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Dictionary">
            <summary>
            dictionary
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndOfFile">
            <summary>
            end of file
            </summary>
        </member>
        <member name="T:netDxf.DxfWriter">
            <summary>
            Low level dxf writer.
            </summary>
        </member>
        <member name="P:netDxf.DxfWriter.ActiveSection">
            <summary>
            Gets the active section.
            </summary>
        </member>
        <member name="P:netDxf.DxfWriter.IsFileOpen">
            <summary>
            Gets if the file is opent.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.Open">
            <summary>
            Opens the dxf file.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.Close">
            <summary>
            Closes the dxf file.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.BeginSection(System.String)">
            <summary>
            Opens a new section.
            </summary>
            <param name="section">Section type to open.</param>
            <remarks>There can be only one type section.</remarks>
        </member>
        <member name="M:netDxf.DxfWriter.EndSection">
            <summary>
            Closes the active section.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.BeginTable(System.String)">
            <summary>
            Opens a new table.
            </summary>
            <param name="table">Table type to open.</param>
        </member>
        <member name="M:netDxf.DxfWriter.EndTable">
            <summary>
            Closes the active table.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.RegisterApplication(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Writes a new extended data application registry to the table section.
            </summary>
            <param name="appReg">Nombre del registro de aplicación.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteViewPort(netDxf.Tables.ViewPort)">
            <summary>
            Writes a new view port to the table section.
            </summary>
            <param name="vp">Viewport.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteDimensionStyle(netDxf.Tables.DimensionStyle)">
            <summary>
            Writes a new dimension style to the table section.
            </summary>
            <param name="dimStyle">DimensionStyle.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteBlockRecord(netDxf.Tables.BlockRecord)">
            <summary>
            Writes a new block record to the table section.
            </summary>
            <param name="blockRecord">Block.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteLineType(netDxf.Tables.LineType)">
            <summary>
            Writes a new line type to the table section.
            </summary>
            <param name="tl">Line type.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteLayer(netDxf.Tables.Layer)">
            <summary>
            Writes a new layer to the table section.
            </summary>
            <param name="layer">Layer.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteTextStyle(netDxf.Tables.TextStyle)">
            <summary>
            Writes a new text style to the table section.
            </summary>
            <param name="style">TextStyle.</param>
        </member>
        <member name="T:netDxf.XDataCode">
            <summary>
            Defines the extended data code.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.String">
            <summary>
            Strings in extended data can be up to 255 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.AppReg">
            <summary>
            Application names can be up to 31 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.ControlString">
            <summary>
            An extended data control string can be either 怒俳r 党・
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.LayerName">
            <summary>
            Name of the layer associated with the extended data
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.BinaryData">
            <summary>
            Binary data is organized into variable-length chunks.
            The maximum length of each chunk is 127 bytes.
            In ASCII DXF files, binary data is represented as a string of hexadecimal digits, two per binary byte
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.DatabaseHandle">
            <summary>
            Handles of entities in the drawing database
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealX">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealY">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealZ">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionX">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionY">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionZ">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementX">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementY">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementZ">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionX">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionY">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionZ">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Real">
            <summary>
            A real value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Distance">
            <summary>
            A real value that is scaled along with the parent entity
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.ScaleFactor">
            <summary>
            Also a real value that is scaled along with the parent.
            The difference between a distance and a scale factor is application-defined
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Integer">
            <summary>
            A 16-bit integer (signed or unsigned)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Long">
            <summary>
            A 32-bit signed (long) integer
            </summary>
        </member>
        <member name="T:netDxf.XDataRecord">
            <summary>
            Represents an entry in the extended data of an entity.
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.OpenControlString">
            <summary>
            An extended data control string can be either 怒俳r 党・
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.CloseControlString">
            <summary>
            An extended data control string can be either "{" or "}".
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested
            </summary>
        </member>
        <member name="M:netDxf.XDataRecord.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new XDataRecord.
            </summary>
            <param name="code">XData code.</param>
            <param name="value">XData value.</param>
        </member>
        <member name="P:netDxf.XDataRecord.Code">
            <summary>
            Gets or set the XData code.
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.Value">
            <summary>
            Gets or sets the XData value.
            </summary>
        </member>
    </members>
</doc>
